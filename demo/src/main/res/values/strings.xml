<resources>
    <string name="app_name">Shadow Gadgets Demo</string>
    <string name="welcome">Welcome to the\n<big><u>Shadow Gadgets Demo</u></big>\n\n• There are multiple pages accessible through the spinner menu in the top left that begins with Overlays 1.\n\n• The Overlays switch to the right will be available on certain pages to toggle the fix on the targets using that particular tool, in order to compare and contrast the effect.\n\n• The underlined texts throughout have relevant contextual information, and can be clicked to bring up the full text in a dialog.\n\n• This demo was designed and tested on 1080x1920 xxhdpi devices. Not much effort has been put into adjusting for other sizes/resolutions, at the moment. Apologies, if that\'s an inconvenience.</string>
    <string name="hide_welcome">Don\'t show this again.</string>

    <string name="overlays_1_top">Use the Overlays switch above, to the right, to toggle the overlay fix here and wherever else it\'s available.\n\nThese first two sections show simple <tt>View</tt>s with round rectangle backgrounds, with controls to vary the elevation and color, so you can play around with those attributes to observe how the original shadows behave, and to see what exactly these tools are clipping out in fixing them.\n\nNote that the Elevation, Alpha, and Color controls affect only the two targets on this page.</string>
    <string name="overlays_1_bottom">Long-click to drag and drop the target among the three frames. This is meant to demonstrate that the clipped shadow handles moving itself automatically if its target is moved to a new parent.\n\nThis arrangement also happens to illustrate how the shadows are actually created from two sources, and how they will vary with their location on screen because of that.\n\nSince the drag-and-drop is incidental here, this is using only the default <tt>DragShadowBuilder</tt>, so as not to complicate the example unnecessarily.</string>

    <string name="overlays_2_top">This <tt>MotionLayout</tt> is a slight modification to one of the official examples that simply allows you to drag the <tt>View</tt> side to side while it animates some properties proportionally.\n\nThough it might be difficult to spot with a finger in the way, the clipped shadow can be seen to follow the target and to adjust for its scaling appropriately.</string>
    <string name="overlays_2_bottom">This sample comprises a <tt>CoordinatorLayout</tt> with some <tt>FloatingActionButton</tt>s and a <tt>Snackbar</tt>, to illustrate the behavior with common animations.\n\nHere you might notice the last (known) overall bug with the overlays. Sometimes, <tt>CoordinatorLayout</tt> (and likely other mechanisms, too) can somehow move the target faster than the shadow can keep up, leaving it a bit out of sync during an animation.\n\nFurther fine-tuning is in the works.</string>

    <string name="view_groups_top">A handful of standard <tt>ViewGroup</tt> subclasses are included to overcome some of the limitations of the overlay approach.\n\nThis <tt>CoordinatorLayout</tt> setup is identical to the one on the second Overlays page, but it should not display the lag that the other can.</string>
    <string name="view_groups_bottom">A few recycling adapter <tt>View</tt>s like <tt>RecyclerView</tt> are optimized, too, as you can see on the left.\n\nThe static setup in the <tt>ClippedShadowsFrameLayout</tt> to the right is to demonstrate how overlapping siblings will behave in all of the <tt>ViewGroup</tt>s, currently.\n\nUnfortunately, at the moment they are all forced to use the fallback drawing method, due to an unforeseen issue with the primary one, so overlapping siblings will show the same shadows defect as the overlay fallback (missing in the intersection).</string>

    <string name="drawables_top"><tt>ShadowDrawable</tt> is relatively basic, at present, but it does offer another possible fix option if the other two aren\'t working for you.\n\nThough it does require the primary drawing method, every effort has been made to ensure that <tt>ShadowDrawable</tt>, at least, has access to that on every supported API level.\n\nThe example here is using a <tt>fillPaint</tt> with a simple color value to fill the interior.</string>

    <string name="colors_first">Starting with API level 28 (Pie), shadows have a couple of attributes available to tint them slightly for colored ambient and spot sources.\n\nHowever, I\'ve never gotten shadow colors to work at all on Pie itself, with or without this library involved. I can\'t find any other mention of the same error, though, so it apparently works for everybody else? I\'m truly baffled by it, at the moment.\n\nAnyway, this may or may not work on your Pie device. It works as expected for subsequent versions.</string>
    <string name="colors_second">The dummy buttons below simply serve to provide alternate contrast, and to allow you to see these colored shadows during elevation animations. By default, the relevant values contribute only very slight tinting to the base color, and it can be too subtle to notice.\n\nThe elevation setting above is not applied to these buttons, as they have <tt>StateListAnimator</tt>s to control their z-offsets in response to state changes.</string>

    <string name="inflation_top">There\'s not much to see at runtime with these three examples of the layout inflation helpers; their benefit and effect are primarily in the code.\n\nEach <tt>Activity</tt> demonstrates the particular helper class for its configuration, and a different option for defining and setting the tag matchers.\n\nThe UIs themselves are non-functional mock-ups.</string>

    <string name="limitations_first">The static setups below demonstrate the main limitation of the current overlay technique: sibling <tt>View</tt>s that overlap targets can cause glitches like those shown here.\n\nOn the left, the red <tt>View</tt> is opaque and elevated above the blue target, but the blue\'s clipped shadow draws over the red sibling.\n\nThe right side shows two targets overlapping. Depending on whether the <tt>RenderNode</tt> or the <tt>View</tt> implementation is running, it might have incorrect shadows in the intersection, or no shadows in that area at all.</string>
    <string name="limitations_second">Starting with Android R, this will only work automatically with <tt>View</tt>s that are circles, rectangles, or regular round rectangles. If you\'re running on an applicable version, you can see the failure with the quarter-round square on the bottom-right.\n\nThe increasing restrictions on non-SDK interfaces introduced in Pie have finally removed access to the <tt>Path</tt> object that describes irregular shapes.\n\nA future release will have some alternate method for these newer versions, in some form or another. For now, you might be able to use <tt>ShadowDrawable</tt> as a background, as it will still work with arbitrary shapes.</string>

    <string name="platform_description"><big>Platform <tt>Activity</tt> with <tt>Theme.Material</tt></big>\n\nThis <tt>Activity</tt> uses only platform <tt>View</tt>s. It attaches a helper <tt>Factory</tt> to its <tt>LayoutInflater</tt> before <tt>setContentView()</tt>, and targets any <tt>View</tt> with the <tt>app:clipOutlineShadow</tt> attribute set to <tt>true</tt>.</string>
    <string name="compat_description"><big><tt>AppCompatActivity</tt> with <tt>Theme.AppCompat</tt></big>\n\nThis library <tt>Activity</tt>\'s inflater helper is attached through the <tt>viewInflaterClass</tt> mechanism, and it targets <tt>View</tt>s based on rules defined in a resource XML file.</string>
    <string name="material_description"><big><tt>AppCompatActivity</tt> with <tt>Theme.MaterialComponents</tt></big>\n\nThis <tt>AppCompatActivity</tt> setup attaches the inflater helper and builds the tag matchers programmatically.</string>
    <string name="launch">Launch</string>

    <string name="platform_title"><tt>Activity</tt></string>
    <string name="platform_subtitle"><tt>Theme.Material</tt></string>
    <string name="platform_summary">This layout was modified to add <tt>app:clipOutlineShadow=\"true\"</tt> attributes to the target <tt>View</tt>s, and the helper is attached in the <tt>Activity</tt>\'s <tt>onCreate()</tt> override.\n\nThe <tt>Button</tt>s below are both similar, except the left one is not fixed, and the right one is. The other two <tt>Activity</tt> examples have similar setups to compare.</string>

    <string name="compat_title"><tt>AppCompatActivity</tt></string>
    <string name="compat_subtitle"><tt>Theme.AppCompat</tt></string>
    <string name="compat_summary">This setup requires neither the layout nor the <tt>Activity</tt> class be altered. Instead, the helper is set through the <tt>viewInflaterClass</tt> theme attribute, and tag matcher rules are defined in a resource XML file.</string>

    <string name="material_title"><tt>AppCompatActivity</tt></string>
    <string name="material_subtitle"><tt>Theme.MaterialComponents</tt></string>
    <string name="material_summary">This example sets the <tt>viewInflaterClass</tt> value in code, before <tt>super.onCreate()</tt>, and the <tt>TagMatcher</tt>s are defined programmatically.</string>

    <string name="unavailable_drawables">ShadowDrawable is unavailable on the current device.</string>
    <string name="unavailable_colors">Shadow colors are not available on the current API level.</string>
</resources>